plugins {
    id 'org.ajoberstar.grgit.service' version '5.2.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.2.1'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

group = "igentuman.bfr"
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "BetterFusionReactor"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: 'parchment', version: '2023.07.09-1.20.1'
    accessTransformers.from(file('src/main/resources/META-INF/accesstransformer.cfg'))
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                bfr {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                bfr {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'bfr', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                bfr {
                    source sourceSets.main
                }
            }
        }
    }
}


repositories {
    flatDir { dirs 'libs' }
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
            includeGroup 'com.blamejared.jeitweaker'
        }
    }
    maven {
        name 'curios'
        url "https://maven.theillusivec4.top/"
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
        content {
            includeGroup 'team.chisel.ctm'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Modmaven'
        url 'https://modmaven.dev/'
        content {
            includeGroup 'appeng'
            includeGroup 'mcjty.theoneprobe'
            includeGroup 'mekanism'
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("com.github.mekanism.mekanism:Mekanism:1.20.1-10.3.9.homebaked-all")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
   // implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    //implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators

    //implementation(fg.deobf("curse.maven:cc-tweaked-282001:${cc_tweaked_id}"))

   // compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    //compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
   // runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
   // compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
  //      transitive = false
  //  }
  //  runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
  //      transitive = false
  //  }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "bfr",
                "Specification-Vendor"    : "igentuman",
                "Specification-Version"   : "${project.mod_version}", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.mod_version}",
                "Implementation-Vendor"   : "igentuman",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

tasks.withType(GenerateModuleMetadata) {
    //Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}