plugins {
    id 'org.ajoberstar.grgit.service' version '5.2.2'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.darkhax.curseforgegradle' version '1.1.23'
    id 'net.neoforged.gradle.userdev' version '7.0.133'

}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.7'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

group = "igentuman.bfr"
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "BetterFusionReactor"
base {
    archivesName = archivesBaseName
}
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources { srcDir 'src/generated/resources' }
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

repositories {
    flatDir { dirs 'libs' }
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'CraftTweaker'
        url "https://maven.blamejared.com"
        content {
            includeGroup 'com.blamejared.crafttweaker'
            includeGroup 'com.blamejared.jeitweaker'
        }
    }
    maven {
        name 'curios'
        url "https://maven.theillusivec4.top/"
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
        content {
            includeGroup 'team.chisel.ctm'
        }
    }
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Modmaven'
        url 'https://modmaven.dev/'
        content {
            includeGroup 'appeng'
            includeGroup 'mcjty.theoneprobe'
            includeGroup 'mekanism'
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${forge_version}"
    annotationProcessor project(":annotation-processor")
    implementation "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    implementation "mekanism:Mekanism:${mekanism_version}"// core
    implementation "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generators
    implementation("curse.maven:cc-tweaked-282001:${cc_tweaked_id}") {
        transitive = false
    }
   // compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    //compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
   // runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
   // compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
  //      transitive = false
  //  }
  //  runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
  //      transitive = false
  //  }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.withType(GenerateModuleMetadata) {
    //Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}